name: CI/CD - Build & Push Docker, Deploy ECS Service

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: Deploy Flask Service to ECS
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: latest
      IMAGE_URI: ${{ secrets.ECR_REPOSITORY }}:latest
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      ECS_TASK_DEF_TEMPLATE: ecs-task-def.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Render ECS task definition
        run: |
          sed "s|470296731078.dkr.ecr.ap-south-1.amazonaws.com/flask-ecs-app|$IMAGE_URI|g" $ECS_TASK_DEF_TEMPLATE > rendered-task-def.json

      - name: Deploy to ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: rendered-task-def.json
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

