name: CI/CD - Build & Push Docker, Deploy ECS Service

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    name: Deploy Flask Service to Existing ECS Cluster
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: latest
      IMAGE_URI: ${{ secrets.ECR_REPOSITORY }}:latest
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
      ECS_TASK_DEF_TEMPLATE: task-definition.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Render ECS task definition
        run: |
          sed "s|<IMAGE_URI>|$IMAGE_URI|g" ecs-task-def-template.json > $ECS_TASK_DEF_TEMPLATE

      - name: Register new ECS task definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-register-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEF_TEMPLATE }}

      - name: Deploy new task definition to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          service: ${{ env.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.register-task-def.outputs.task-definition-arn }}

